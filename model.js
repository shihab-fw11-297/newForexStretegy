const express = require('express');
const tf = require('@tensorflow/tfjs');
const fs = require('fs');

// Mock EUR/USD forex data (replace with real-time data source if available)
const data = [{"t":1727425800,"o":1.113695,"h":1.11377,"l":1.11358,"c":1.113675},{"t":1727425740,"o":1.11378,"h":1.11393,"l":1.11367,"c":1.113705},{"t":1727425680,"o":1.11378,"h":1.11391,"l":1.11369,"c":1.11377},{"t":1727425620,"o":1.11378,"h":1.11407,"l":1.11372,"c":1.1138375},{"t":1727425560,"o":1.113995,"h":1.11409,"l":1.11376,"c":1.11379},{"t":1727425500,"o":1.1138325,"h":1.11404,"l":1.11377,"c":1.11398},{"t":1727425440,"o":1.1136975,"h":1.11389,"l":1.11361,"c":1.1138325},{"t":1727425380,"o":1.113725,"h":1.1138,"l":1.11358,"c":1.1136875},{"t":1727425320,"o":1.113725,"h":1.11381,"l":1.11364,"c":1.1137},{"t":1727425260,"o":1.1136575,"h":1.11389,"l":1.1136,"c":1.113735},{"t":1727425200,"o":1.11358,"h":1.1137,"l":1.11352,"c":1.1136475},{"t":1727425140,"o":1.1136425,"h":1.11375,"l":1.11356,"c":1.1136425},{"t":1727425080,"o":1.11348,"h":1.11369,"l":1.11338,"c":1.113635},{"t":1727425020,"o":1.113395,"h":1.11352,"l":1.11329,"c":1.11348},{"t":1727424960,"o":1.113335,"h":1.1135,"l":1.11328,"c":1.11337},{"t":1727424900,"o":1.113445,"h":1.11349,"l":1.11329,"c":1.1133875},{"t":1727424840,"o":1.11331,"h":1.11353,"l":1.11326,"c":1.11344},{"t":1727424780,"o":1.1132325,"h":1.11341,"l":1.11319,"c":1.113315},{"t":1727424720,"o":1.11312,"h":1.11332,"l":1.11307,"c":1.1132425},{"t":1727424660,"o":1.11317,"h":1.11321,"l":1.11304,"c":1.113155},{"t":1727424600,"o":1.1133025,"h":1.11349,"l":1.11311,"c":1.113245},{"t":1727424540,"o":1.1128925,"h":1.11334,"l":1.11283,"c":1.11324},{"t":1727424480,"o":1.1127125,"h":1.11292,"l":1.11259,"c":1.1128325},{"t":1727424420,"o":1.1128425,"h":1.11294,"l":1.11266,"c":1.1127275},{"t":1727424360,"o":1.1132,"h":1.11323,"l":1.11273,"c":1.1128425},{"t":1727424300,"o":1.113065,"h":1.11328,"l":1.11301,"c":1.11321},{"t":1727424240,"o":1.11308,"h":1.11324,"l":1.113,"c":1.11308},{"t":1727424180,"o":1.113235,"h":1.11331,"l":1.11306,"c":1.113145},{"t":1727424120,"o":1.11328,"h":1.11343,"l":1.11315,"c":1.113255},{"t":1727424060,"o":1.113125,"h":1.11337,"l":1.11307,"c":1.113295},{"t":1727424000,"o":1.113305,"h":1.11334,"l":1.11298,"c":1.1130875},{"t":1727423940,"o":1.113175,"h":1.11339,"l":1.11314,"c":1.113285},{"t":1727423880,"o":1.1130425,"h":1.11331,"l":1.11297,"c":1.1131975},{"t":1727423820,"o":1.11314,"h":1.11317,"l":1.11297,"c":1.113025},{"t":1727423760,"o":1.112925,"h":1.11316,"l":1.11288,"c":1.113085},{"t":1727423700,"o":1.1134025,"h":1.11346,"l":1.11287,"c":1.11291},{"t":1727423640,"o":1.11367,"h":1.11374,"l":1.11318,"c":1.1133625},{"t":1727423580,"o":1.11378,"h":1.11383,"l":1.11364,"c":1.11369},{"t":1727423520,"o":1.11374,"h":1.11385,"l":1.11358,"c":1.113765},{"t":1727423460,"o":1.11368,"h":1.11385,"l":1.11357,"c":1.1137675},{"t":1727423400,"o":1.113545,"h":1.11379,"l":1.11348,"c":1.1137175},{"t":1727423340,"o":1.11349,"h":1.11359,"l":1.11343,"c":1.113525},{"t":1727423280,"o":1.1133625,"h":1.11363,"l":1.11326,"c":1.113475},{"t":1727423220,"o":1.113565,"h":1.11371,"l":1.11331,"c":1.1133725},{"t":1727423160,"o":1.113465,"h":1.11361,"l":1.11342,"c":1.113535},{"t":1727423100,"o":1.11337,"h":1.11353,"l":1.11328,"c":1.113445},{"t":1727423040,"o":1.113455,"h":1.11349,"l":1.11326,"c":1.113385},{"t":1727422980,"o":1.11334,"h":1.11352,"l":1.11323,"c":1.11347},{"t":1727422920,"o":1.11318,"h":1.11336,"l":1.113,"c":1.113315},{"t":1727422860,"o":1.1130925,"h":1.11322,"l":1.11298,"c":1.113145},{"t":1727422800,"o":1.112865,"h":1.11315,"l":1.11282,"c":1.1130675},{"t":1727422740,"o":1.1129725,"h":1.11314,"l":1.11282,"c":1.11289},{"t":1727422680,"o":1.11306,"h":1.11309,"l":1.11256,"c":1.1129875},{"t":1727422620,"o":1.1131675,"h":1.11326,"l":1.11287,"c":1.1130675},{"t":1727422560,"o":1.11305,"h":1.11327,"l":1.11298,"c":1.1131475},{"t":1727422500,"o":1.1133425,"h":1.11339,"l":1.11295,"c":1.113065},{"t":1727422440,"o":1.1133225,"h":1.11342,"l":1.1132,"c":1.1133675},{"t":1727422380,"o":1.113245,"h":1.11354,"l":1.11321,"c":1.1133425},{"t":1727422320,"o":1.1132925,"h":1.1135,"l":1.11317,"c":1.1133125},{"t":1727422260,"o":1.1132675,"h":1.1135,"l":1.11314,"c":1.1132775},{"t":1727422200,"o":1.1131,"h":1.11351,"l":1.11306,"c":1.1133425},{"t":1727422140,"o":1.112865,"h":1.11312,"l":1.11281,"c":1.11308},{"t":1727422080,"o":1.1128225,"h":1.11294,"l":1.11268,"c":1.112855},{"t":1727422020,"o":1.1129425,"h":1.11305,"l":1.11261,"c":1.112835},{"t":1727421960,"o":1.11261,"h":1.1131,"l":1.11254,"c":1.1129175},{"t":1727421900,"o":1.112705,"h":1.11283,"l":1.11245,"c":1.112675},{"t":1727421840,"o":1.1130725,"h":1.11316,"l":1.11266,"c":1.112705},{"t":1727421780,"o":1.1134425,"h":1.1135,"l":1.11302,"c":1.1130725},{"t":1727421720,"o":1.113385,"h":1.11354,"l":1.11327,"c":1.1134075},{"t":1727421660,"o":1.11338,"h":1.11345,"l":1.11327,"c":1.11336},{"t":1727421600,"o":1.113445,"h":1.11355,"l":1.11328,"c":1.1134},{"t":1727421540,"o":1.113635,"h":1.11369,"l":1.11328,"c":1.11346},{"t":1727421480,"o":1.11353,"h":1.1137,"l":1.11344,"c":1.1136},{"t":1727421420,"o":1.113365,"h":1.11358,"l":1.11327,"c":1.113485},{"t":1727421360,"o":1.113475,"h":1.11361,"l":1.11334,"c":1.11342},{"t":1727421300,"o":1.1137375,"h":1.11385,"l":1.11346,"c":1.11349},{"t":1727421240,"o":1.11373,"h":1.11383,"l":1.11352,"c":1.1137225},{"t":1727421180,"o":1.1134075,"h":1.11377,"l":1.11336,"c":1.11368},{"t":1727421120,"o":1.113455,"h":1.1135,"l":1.11327,"c":1.11344},{"t":1727421060,"o":1.113525,"h":1.11359,"l":1.11339,"c":1.11345},{"t":1727421000,"o":1.1136275,"h":1.11369,"l":1.11342,"c":1.11354},{"t":1727420940,"o":1.1137025,"h":1.11376,"l":1.11354,"c":1.1136275},{"t":1727420880,"o":1.1136525,"h":1.11388,"l":1.11354,"c":1.1136925},{"t":1727420820,"o":1.1138175,"h":1.11388,"l":1.11358,"c":1.1136975},{"t":1727420760,"o":1.1139075,"h":1.11395,"l":1.1136,"c":1.1137325},{"t":1727420700,"o":1.1140625,"h":1.11416,"l":1.11374,"c":1.1138975},{"t":1727420640,"o":1.1142775,"h":1.11436,"l":1.11399,"c":1.1140775},{"t":1727420580,"o":1.1141975,"h":1.11431,"l":1.11405,"c":1.1142025},{"t":1727420520,"o":1.1144575,"h":1.11459,"l":1.1141,"c":1.1142475},{"t":1727420460,"o":1.1144525,"h":1.11458,"l":1.11427,"c":1.1144525},{"t":1727420400,"o":1.11503,"h":1.11511,"l":1.11409,"c":1.1144525}];

// Express server setup
const app = express();
const port = 3000;

// Convert the data into a format suitable for TensorFlow (normalize and prepare training data)
function prepareData(data) {
    const closes = data.map(d => d.c); // Use close price as input feature
    const inputs = [];
    const outputs = [];

    for (let i = 0; i < closes.length - 5; i++) {
        inputs.push(closes.slice(i, i + 5));  // Take 5-minute history as input
        const currentPrice = closes[i + 4];
        const nextPrice = closes[i + 5];

        if (nextPrice > currentPrice) {
            outputs.push([1, 0, 0]); // Up
        } else if (nextPrice < currentPrice) {
            outputs.push([0, 1, 0]); // Down
        } else {
            outputs.push([0, 0, 1]); // Flat
        }
    }
    return { inputs, outputs };
}

const { inputs, outputs } = prepareData(data);

// Convert data to tensors
const inputTensor = tf.tensor2d(inputs);
const outputTensor = tf.tensor2d(outputs);

// Build the TensorFlow model
const model = tf.sequential();
model.add(tf.layers.dense({ units: 10, inputShape: [5], activation: 'relu' }));
model.add(tf.layers.dense({ units: 5, activation: 'relu' }));
model.add(tf.layers.dense({ units: 3, activation: 'softmax' })); // Changed to softmax for multi-class

model.compile({
    optimizer: 'adam',
    loss: 'categoricalCrossentropy', // Changed to categoricalCrossentropy for multi-class classification
    metrics: ['accuracy']
});

// Train the model
async function trainModel() {
    await model.fit(inputTensor, outputTensor, {
        epochs: 50,
        batchSize: 8
    });
    console.log("Model training complete!");
}

// Function to predict the next 5 minutes movement
async function predictNext5Minutes(newData) {
    const closes = newData.map(d => d.c);
    const inputForPrediction = tf.tensor2d([closes]);

    const prediction = await model.predict(inputForPrediction).dataSync();

    // Find the class with the highest probability
    const maxIndex = prediction.indexOf(Math.max(...prediction));

    if (maxIndex === 0) {
        return "UP";
    } else if (maxIndex === 1) {
        return "DOWN";
    } else {
        return "FLAT";
    }
}

// Route for prediction
app.get('/predict', async (req, res) => {
    // Get the last 5 minutes of data
    const last5Minutes = data.slice(-5);

    // Ensure the model is trained before predicting
    await trainModel();

    // Make a prediction based on the latest data
    const prediction = await predictNext5Minutes(last5Minutes);

    res.json({
        status: 'success',
        prediction: prediction
    });
});

// Start the server
app.listen(port, () => {
    console.log(`Forex prediction app running on http://localhost:${port}`);
});
